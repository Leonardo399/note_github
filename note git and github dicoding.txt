# Git dan Github red
! Terdapat menu utama pada saat mengakses halaman GitHub yaitu, Explore Repository, Sign up, dan Sign in. Selain itu, ada juga fitur-fitur pendukung pada GitHub seperti:
	- New Repository, digunakan membuat repository baru dengan jenis public & private.
	- Import Repository, digunakan untuk mengambil/menyalin file proyek dari vendor lain seperti Subversion atau Mercurial ke dalam repository baru pada GitHub. Proses impor dilakukan dengan menggunakan link URL.
	- Gist, digunakan untuk berbagi potongan kode, catatan, melakukan daftar, dan lainnya. Seperti halnya repositori, Anda dapat menyetel dan menyimpan Intisari Anda sebagai rahasia atau publik.
	- GitHub Organization, digunakan untuk berkolaborasi bersama pada suatu organisasi misalnya untuk bisnis dengan sejumlah kelebihan misalnya banyak proyek sekaligus. Pemilik dan administrator dapat mengelola hak akses anggota ke suatu data atau proyek dengan fitur keamanan dan administratif yang canggih.
	- GitHub Project, digunakan untuk mengatur dan memprioritaskan pekerjaan. Anda dapat membuat papan proyek (project board) untuk mengerjakan fitur tertentu, peta alur yang komprehensif (comprehensive roadmaps), atau bahkan merilis daftar periksa (release checklists). Dengan papan proyek, Anda memiliki fleksibilitas untuk membuat alur kerja khusus yang sesuai dengan kebutuhan Anda.

! Dalam toolbar terdapat beberapa menu seperti:
	- Pull request untuk melihat semua aktivitas mengenai pekerjaan yang telah selesai dan tersimpan di dalam GitHub. 
	- Issues untuk melihat semua tanggapan atau komentar mengenai permasalahan yang kita dapat saat menggunakan repository milik orang lain. 
	- Marketplace untuk mencari dan memasang fitur tools pendukung yang disediakan oleh GitHub. Tools dalam marketplace akan membantu Anda dalam mengoptimalkan penggunaan GitHub di dalam proyek. 
	- Explore untuk melihat berbagai informasi atau berita terkini mengenai repository, topik, dan trending di GitHub. 
	- Settings untuk melakukan perubahan profil seperti username, foto, serta informasi lainnya.

! Setiap proyek repository memiliki kolaborator dan kontributor. Seorang kolaborator merupakan anggota tim yang memiliki akses dalam sebuah repositori proyek (project repository). Akses ini tentunya bermacam-macam ya, ada yang dibatasi pada pekerjaan-pekerjaan tertentu, ada pula yang dapat melakukan semua pekerjaan dalam sebuah repository.

! Seorang kolaborator juga dapat berperan sebagai kontributor. Apa itu kontributor? Kontributor adalah siapa saja yang dapat melakukan commit atau menyimpan cuplikan perubahan ke dalam repository (git push). Akan tetapi, tidak semua kontributor dapat melakukan commit secara langsung. Ini disebabkan karena mereka tidak memiliki akses untuk melakukan push ke dalam repository tersebut (atau tidak berperan sebagai kolaborator). Sehingga mereka perlu melakukan pull request untuk melakukan commit pada repository orang lain.

! jika Anda menggunakan akun organisasi, GitHub menyediakan 5 tingkatan level (role) yang berbeda untuk seorang kolaborator, yakni read, triage, write, maintain, dan admin : 
	- Seorang kolaborator dengan tingkatan read, biasanya hanya memiliki akses untuk membuka repository. Level ini direkomendasikan untuk orang non-coding (tim lain) yang ingin melihat atau berdiskusi mengenai proyek repository.
	- Seorang kolaborator dengan tingkatan write, biasanya digunakan oleh seorang developer atau pengembang untuk membuka, melakukan clone, dan melakukan push pada repository tersebut. Ia juga dapat mengelola issues dan pull request yang masuk.
	- Seorang kolabolator dengan tingkatan triage, biasanya digunakan oleh maintainer yang hanya dapat mengeloa issues dan pull request yang ada masuk ke dalam repository.
	- Seorang kolaborator dengan tingkatan maintain, biasanya digunakan oleh seorang project manager yang dapat mengelola beberapa pengaturan dalam repository. Ia juga dapat melakukan berbagai hal seseorang dengan tingkatan read.
	- Seorang kolaborator dengan tingkatan admin, biasanya digunakan oleh seseorang yang butuh mengakses secara penuh kepada repository. Ia dapat melakukan berbagai hal, termasuk mengundang kolaborator lain untuk bergabung dalam repository.


# Dasar Git red 
! File README.md berisi mengenai isi dari repository
! Untuk format penulisan README.md yang lebih lengkap, Anda dapat mempelajarinya di https://www.markdownguide.org/basic-syntax/


## Cara membuat release di github 
// berikut langkah-langkahnya : 
	1. buka reponya di github
	2. klik menu release yang terletak di kanan view
	3. isi form yang muncul (tidak wajib smua harus terisi) : 
		- Bagian tag version berfungsi untuk membuat nama versi. Biasanya nama versi dituliskan dengan huruf v, lalu diikuti dengan nomor versi. Contohnya, seperti v.1.0, v.1.0.0, dan sejenisnya. Jika pembuatan release file digunakan untuk proyek aplikasi, sebaiknya penamaan dari tag version menggunakan semantic versioning.
		- Bagian release title atau judul dari versi rilis berfungsi sebagai judul rilis yang menjelaskan secara singkat versi rilis yang akan dibuat.
		- Bagian description atau deskripsi versi rilis berfungsi untuk menuliskan deskripsi detail dari versi rilis yang akan dibuat.
		- Bagian Attach binaries berfungsi untuk tempat mengunggah file binary, contohnya file-file hasil compile program, compressed file source code, atau file dokumentasi. Biasanya attach binaries digunakan para pengguna Git yang membuat release file untuk proyek aplikasi.
		- Bagian checkbox pre-release berfungsi untuk menandai bahwa pembuatan rilis ini bersifat pra rilis atau masih dalam bentuk beta. Bagian ini biasa digunakan para pengguna Git yang sedang dalam pengembangan proyek aplikasi di repository GitHub.

	4. Setelah yakin dengan semua yang Anda tulis, silakan klik button Publish release

## Rangkuman Dasar Git
! Ketika membuat repositoryada beberapa inisialisasi yang bisa kita lakukan, yaitu:
	- Add a README file atau penambahan README File pada repository baru. Ketika repository telah dibuat, GitHub secara otomatis membuatkan file Readme ke dalam repository. 
	- Add .gitignore atau penambahan berkas .gitignore pada repository. Ketika repository telah terbuat, file .gitignore akan tercipta sesuai dengan pilihan template.gitignore yang dipilih.
	- Choose a license atau penambahan berkas license pada repository. Ketika membuat repository, Anda bisa memilih lisensi untuk repository tersebut sehingga proyek yang ada di dalamnya dapat digunakan secara bebas oleh orang lain.



# Git Branches red

## Rankuman
! Berikut adalah alasan dari penggunaan Git Branch:
	- Tanpa git branch pekerjaan akan menjadi rumit. Ketika fitur yang telah selesai masih menjadi satu dengan fitur lain dan kemudian dijalankan, maka akan terdapat banyak bug atau kesalahan karena ada pekerjaan yang tumpang tindih.
	- Penambahan branch baru dapat meminimalisir kesalahan pada aplikasi utama.
	- Git branch juga berfungsi untuk mempermudah dalam berkolaborasi dalam tim. Selain itu, membuat pekerjaan menjadi lebih teratur karena setiap pekerjaan tidak saling tumpang tindih.

! Ketika pembuatan branch baru, kita memerlukan source (sumber) untuk pengembangan aplikasi, sehingga kita perlu mengambil sumbernya berdasarkan branch utama yang biasa disebut main/master





# Kolaborasi dengan Tim red
! seorang kolaborator belum tentu seorang kontributor karena seorang kolaborator belum tentu pernahmelakukan commit atau merubah repo di github, tetapi seorang kontributor sudah tentu pernah melakukan commit atau merubah. 
! Seorang kontributor bisa merupakan dari orang luar proyek atau organisasi.

## Latihan Berkolaborasi dengan Tim
// cara invit kolaborator
	1. masuk ke menu setting di repo
	2. klik menu manage account
	3. klik invite contributor kemudian tuliskan nama akun contributor
	   -> nanti di email akun contributor akan ada pesan invitation
	4. jika akun contributor accept invitation maka contributor dapat mengakses reponya

// saat ingin merge pull request / confirm pull request gold
	! Sebelum menekan "Merge pull request", perhatikanlah dropdown di bagian kanan tombol tersebut. Perlu Anda tahu, sebenarnya ada beberapa macam cara untuk menggabungkan perubahan ke branch/repository utama.
	Ketiga item tersebut sama-sama berfungsi untuk menggabungkan commit ke dalam branch utama. Namun, terdapat perbedaan hasil dari masing-masing opsi tersebut. Berikut untuk detailnya:
	- Create a merge commit:  Commit yang dilakukan akan dicatat dan dimasukkan ke dalam history commit branch tujuan. Selain itu, ada satu commit baru yang menginformasikan bahwa telah terjadi proses penggabungan.
	- Squash and merge: Commit yang dilakukan akan digabungkan dan dicatat menjadi satu commit dalam history commit branch tujuan. (lebih rapih(beberapa commit d branch menjadi satu commit saja saat di merge di branch tujuan))
	- Rebase and merge: Commit yang dilakukan akan dipindahkan ke dalam history commit commti tujuan. Namun tidak akan membuat commit baru untuk menginformasikan proses pencatatan. (lebih rapih)


## Apa itu Fork 
! Fork adalah proses menyalin proyek repository orang lain ke repository pribadi. Fork bertindak sebagai jembatan antara repositori asli (original repository) dan repositori salinan (fork repository). Anda dapat menawarkan untuk menggabungkan perubahan yang telah Anda lakukan pada repositori salinan ke repositori asal untuk membantu membuat proyek orang lain lebih baik dengan melakukan pull request.

! Pada praktiknya, ketika Anda tidak memiliki akses pada sebuah public repository, Anda dapat melakukan beberapa tahap berikut agar dapat berkontribusi pada repository tersebut:
	- Melakukan fork atau menyalin suatu repository.
	- Melakukan perbaikan atau menambahkan perubahan.
	- Melakukan pull request agar perubahan dapat disetujui untuk digabungkan ke dalam repository asli.


## Code reviews 
! Code reviews bertujuan untuk  mengomentari perubahan, menyetujui perubahan, atau meminta perubahan lebih lanjut sebelum pull request digabungkan.
! Berikut beberapa aspek yang dapat digunakan sebagai acuan dalam melakukan ulasan kode/code reviews:
	- Kode dirancang dengan baik.
	- Fungsionalitasnya dapat berjalan dengan baik.
	- Setiap perubahan yang dilakukan masuk akal dan terlihat bagus.
	- Kodenya tidak lebih kompleks dari yang seharusnya.
	- Developer mengimplementasikan hal-hal yang diperlukan saat ini saja. Bukan menyediakan kode untuk masa depan, tetapi tidak digunakan saat ini.
	- Kode memiliki unit test (pengujian unit) yang sesuai.
	- Pengujian dirancang dengan baik.
	- Pengembang menggunakan nama yang jelas untuk segala penamaan.
	- Komentar yang ditambahkan jelas dan bermanfaat. Selain itu komentar ditujukan untuk menjelaskan kode apa yang ditulis beserta alasannya.
	- Kode telah didokumentasikan dengan tepat.
	- Kode ditulis sesuai dengan panduan (style guideline) yang telah disepakati.
! Terdapat dua kondisi yang cocok untuk melakukan ulasan kode, antara lain:
	- Pertama, ulasan kode dilakukan sewaktu anggota tim melakukan Pull request dan sebelum menggabungkannya (merge) ke branch utama (base branch).
	Kondisi ini dapat dijalankan sebelum pengelola (administrator/pemilik) repository melakukan merge. Reviews akan dilakukan dengan cara memeriksa setiap perubahan yang dilakukan, apakah terdapat kesalahan atau tidak. Jika dirasa tidak ada kesalahan, merge dapat langsung dilakukan.

	- Kedua, ulasan kode dapat dilakukan setelah merge (penggabungan) perubahan ke base branch (branch utama). Mengapa ulasan kode dilakukan setelah merge (penggabungan)? Sebab terkadang anggota tim (kontributor) bisa saja melewatkan proses ulasan kode sewaktu melakukan pull request, sehingga akan membuat pekerjaan menjadi kurang efisien dan memengaruhi kinerja tim dalam mengembangkan sebuah produk.

! Ulasan kode perlu dilakukan agar tidak menimbulkan permasalahan ke depannya. Dampaknya, anggota tim lain harus menunggu proses code review tersebut agar tidak terjadi masalah lain sewaktu menggabungkan perubahan ke base branch (cabang utama).



# Studi Kasus Kolaborasi dengan Tim red
## Rangkuman 
! Dengan melakukan PR, kita dapat meninjau terlebih dahulu apakah kode yang akan diimplementasikan sudah sesuai atau belum. Sehingga kita bisa menghindari terjadinya bug atau masalah. Selain itu, Anda juga bisa berdiskusi dengan rekan tim atau orang lain dalam PR tersebut.

! Terdapat beberapa kolom yang bisa Anda isi pada halaman pull-request dalam GitHub.
	- Message Merge : Digunakan untuk memberikan pesan singkat mengenai PR yang dilakukan.
	- Description Commit : Digunakan untuk memberikan informasi yang lebih detail mengenai PR yang dilakukan.
	- Reviewer : Digunakan untuk meminta lain untuk mereviu perubahan yang telah dilakukan.
	- Assigness : Digunakan untuk menginformasikan siapa yang memberikan tugas untuk melakukan PR.
	- Label : Digunakan untuk memberikan kategori pada sebuah PR, contohnya pembetulan suatu masalah (bug), penambahan fitur (enhancement), penambahan dokumentasi (documentation), atau yang lainnya.




# Github Sebagai Portfolio red

## Latihan membuat portfolio dengan github 
! Ikutilah beberapa tahap berikut untuk mengikuti latihan membuat portofolio menggunakan GitHub : 
	1. Buatlah sebuah repository baru di akun github anda
	2. Pastikan Anda memberikan nama repository dengan nama akun. Contohnya, di sini kami menggunakan akun Febrianto752, maka nama repository yang kami tulis harus "Febrianto752" juga.
		! Selamat! Anda telah menemukan salah satu rahasia dari GitHub, yakni ketika membuat repository dengan nama akun GitHub, berkas readme-nya akan tampil di halaman profil Anda. Pastikan Anda memberi tanda “Public” dan “Add a README file”.
		-> klik create repository jika sudah yakin dengan isinya
	3. Selanjutnya, sebuah repository baru akan terbentuk dalam akun Anda, Yang perlu kita lakukan saat ini adalah menambahkan teks pada berkas README sebagai portofolio Anda.
		-> edit README nya

	4. Isi Readme sesuai dengan portfolio yang akan anda buat
	5. Untuk memastikan apa yang Anda tulis ke dalam berkas readme sesuai dengan ekspektasi, silakan periksa menggunakan fitur preview.	
		-> Jika sudah yakin, klik “Commit changes” untuk menyimpan perubahan tersebut.
		-> Setelah berkas readme diperbarui, kita dapat memeriksa apakah terdapat perbedaan di halaman profil akun GitHub Anda. Sebab, ketika membuat repository dengan nama akun GitHub, secara otomatis berkas readme di dalamnya akan tampil pada halaman profil akun GitHub.
	6. Bukalah pengaturan profil Anda dengan cara klik profil Anda, kemudian pilih “Your profile”.
	7. Finish Anda berhasil membuat halaman portofolio pada akun GitHub.
	-> Anda telah berhasil membuat sebuah portofolio menggunakan GitHub. Dengan begitu, Anda dapat dengan mudah membagikan portofolio ketika ada yang bertanya. Cukup bagikan tautan akun profil Anda seperti ini: https://github.com/Febrianto752



## Latihan Melihat Portfolio para Developer 

// link referensi contoh portfolio para developer
	- https://github.com/coderjojo/creative-profile-readme
	- https://github.com/abhisheknaiidu/awesome-github-profile-readme
	// link membuat tampilan statistik di github
		- https://github.com/anuraghazra/github-readme-stats.


// contoh membuat tampilan statistik
	! sesuaikan usernamenya dengan username akun anda
	<p align="left">
	<a href="https://github.com/Febrianto752">
	  <img height="180em" src="https://github-readme-stats-eight-theta.vercel.app/api?username=febrianto752&show_icons=true&theme=algolia&include_all_commits=true&count_private=true"/>
	  <img height="180em" src="https://github-readme-stats-eight-theta.vercel.app/api/top-langs/?username=febrianto752&layout=compact&langs_count=8&theme=algolia"/>
	</a>
	</p>

	! tambahkan ini di file readme.md portfolio



## Rangkuman
! CV berbeda dengan Portofolio.

! CV atau curriculum vitae merupakan gambaran tertulis tentang pengalaman seseorang beserta kualifikasi lain untuk mendapatkan kesempatan kerja, sedangkan portofolio biasanya digunakan untuk membuktikan apa yang telah ditulis dalam CV.


!! NOTE !! red
! Insights Graph repository hanya tersedia di repository publik dengan GitHub Free dan GitHub Free untuk organisasi. Sedangkan untuk repository private dapat digunakan melalui GitHub Pro, GitHub Team, GitHub Enterprise Cloud, dan GitHub Enterprise Server. Untuk informasi lebih lanjut, lihat " Tentang grafik repositori " dan " Produk GitHub ."
! Bisa melihat rangkumannya di module Penutup -> Rankuman Kelas


$ pada tanggal 02/08/2021 website Dicoding sedang dilakukan maintenance



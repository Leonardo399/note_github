// Cara rename commit saat keadaan blm push ke repositori, atau melakukan commit lgi
	1. ketik di git bash : git commit --amend , nanti akan muncul di text editor pesan yg ingin diubah -> ubah pesannya kemudian save, lalu close 
	== atau 
	1. ketik di git bash : git commit --amend -m "New commit message."

	--> kemudian ketik : git push --force <remoteName> <branchName> untuk merubah history digithub jika meremote


// Cara rename multiple commit saat sudh di push, atau sudah melakukan commit baru
	1. ketik di git bash : git rebase -i HEAD~<brapa commit yang ingin di rename>, contoh : git rebase -i HEAD~2 (mengambil 2 commit teratas yang akan diubah)
		-> nanti akan muncul di texteditor configurasi pesan" yg ingin dirubah :
			pick 37482c5 menambahkan file index.htm // ubah 'pick' menjadi reword 

			# Rebase 61de790..37482c5 onto 61de790 (1 command)
			#
			# Commands:
			# p, pick <commit> = use commit
			# r, reword <commit> = use commit, but edit the commit message
			# e, edit <commit> = use commit, but stop for amending
			# s, squash <commit> = use commit, but meld into previous commit
			# f, fixup <commit> = like "squash", but discard this commit's log message
			# x, exec <command> = run command (the rest of the line) using shell
			# b, break = stop here (continue rebase later with 'git rebase --continue')
			# d, drop <commit> = remove commit
			# l, label <label> = label current HEAD with a name
			# t, reset <label> = reset HEAD to a label
			# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
			# .       create a merge commit using the original merge commit's
			# .       message (or the oneline, if no original merge commit was
			# .       specified). Use -c <commit> to reword the commit message.
			#
			# These lines can be re-ordered; they are executed from top to bottom.
			#
			# If you remove a line here THAT COMMIT WILL BE LOST.
			#
			# However, if you remove everything, the rebase will be aborted.
			#
		-> kemudian nanti akan muncul d text editor pesan" yg ingin direname

		--> kemudian ketik : git push --force <remoteName> <branchName> untuk merubah history digithub jika meremote


# Git Reset, untuk menghapus commit yg berada di depan commit yg d tuju
	- Perintah git reset sering disebut sebagai perintah berbahaya yang dapat menghancurkan catatan sejarah perubahan.

	- Hati-hati! Perintah ini membuat kita tidak bisa kembali lagi ke masa depan. Mau tidak mau, kita harus menulis ulang sejarah.


	- Perintah git reset ini memiliki tiga argumen atau opsi utama, yaitu --soft, --mixed, dan --hard : 
		--soft akan mengebalikan dengan kondisi file dalam keadaan staged
		--mixed akan mengebalikan dengan kondisi file dalam keadaan modified
		--hard akan mengebalikan dengan kondisi file dalam keadaan commited (perubahan hilang smua)

	contoh : git reset --soft 06f735af7724558164c87f6b1ce3ca7778eb1c1b
		-> akan kembali ke keadaan commit tersebut dan menghapus commit yg sudah ad didepanny


# Git Revert
	- Revert artinya mengembalikan. Perintah ini lebih aman daripada git reset, karena tidak akan menghapus catatan sejarah revisi.

	- Revert akan akan mengambil kondisi file yang ada di masa lalu, kemudian menggabungkannya dengan commit terakhir.

	sintaks : git revert <option> <sha> 
	contoh : 
	- git revert --no-commit 06f735af7724558164c87f6b1ce3ca7778eb1c1b
		keterangan : 
			-n, --no-commit       don't automatically commit
	    	-e, --edit            edit the commit message
	== atau bisa tanpa <opsion> : 
	- git revert 06f735af7724558164c87f6b1ce3ca7778eb1c1b

		-> akan muncul text editor, 
		-> pilih perintah git berikut(opsional) : 
			- git revert <subcommand>, contoh : git revert --continue
			keterangan subcommand : 
				--quit                end revert or cherry-pick sequence
			    --continue            resume revert or cherry-pick sequence
			    --abort               cancel revert or cherry-pick sequence
			    --skip                skip current commit and continue
			    --cleanup <mode>      how to strip spaces and #comments from message
		-> jika --continue maka nanti akan membuat commit baru dari penggabungan commit trakhir dan commit di masa lalu(yg dituju)


# membandingkan file pada commit tertentu 
	- git diff <7 digit code log> <7 digit code log>


# remote repo di github
	// add remote
		- git remote add <namaRemote : origin> <link : https://github.com/Febrianto752/test_github.git>
	// rename remote
		- git remote rename <namaLama : origin> <namaBaru : origin Baru>
	// menghapus remote
		- git remote remove <namaRemote : origin>

	// mengirim file di local ke github 
		- git push <namaRemote : origin> <namaCabangTujuanDiGithub : master>


## mengembalikan ke saat sebelum stage area (dari git add ke sebelum git add)
	- git reset namaFile(contoh : index.html)

## mengembalikan ke saat seblum revisi (dari perubahan isi file ke sblm merubah isi file(keadaan awal))
	- git checkout namaFile(contoh : index.html)


## Membuat dan Menghubungkan SSH KEY red
! link reference : https://medium.com/@sarascahya/cara-setup-ssh-pada-akun-github-d59ff480616
! SSH (Secure SHell) adalah protokol transfer yang memungkinkan penggunanya untuk mengontrol sebuah perangkat secara remote atau dari jarak jauh melalui koneksi internet.
! Fungsi SSH adalah sebagai media transfer data aman dan terpercaya yang bisa digunakan secara remote atau dari jarak jauh
! SSH digunakan untuk mengamankan data transfer dan membuat kita tidak usah memasukan username dan password saat melakukan cloning, pull, ataupun push ke github 

// Langkah-langkahnya untuk Generate SSH key di komputer adalah sebagai berikut:
	1. Buka Git Bash (anda bisa mengaksesnya melalui start menu)(name_user@DESKTOP-HQ68B13 MINGW64 ~)
	2. Atur konfigurasi user.name dan user.email yang akan anda gunakan 
	3. Selanjutnya mengecek apakah di device yang anda gunakan sudah ada SSh key atau belum dengan cara ketikan : 'ls -al ~/.ssh' 
		-> jika ada pesan cannot access '....', maka belum ada SSH key yang digenerate di komputer anda
	4. Selanjutnya anda dapat mulai melakukan proses Generate SSh key dengan mengetikan : ssh-keygen -t rsa -b 4096 -C "email@gmail.com"
		-> enter -> enter -> enter
		! nanti akan terbuat file id_rsa dan id_rsa.pub
			! file id_rsa.pub yg berisikan enkripsi password ssh key 
	5.  Jalankan ssh-agent anda terlebih dahulu dengan cara ketikan : 'eval $(ssh-agent -s)'
	6. menambahkan SSH key ke ssh-agent dengan ketikan : 'ssh-add ~/.ssh/id_rsa'
		-> nanti akan ada pesan : 'identity added: /c/Users/febrianto/.ssh/id_rsa'
	7. Setelah setting dibagian git selesai, sekarang saatnya anda memulai untuk setting SSH di akun github anda. Anda dapat meng-copy SSH key dengan cara membuka file id_rsa.pub dengan text-editor kemua copy smua isinya, atau dapat anda lakukan dengan ketikan : 'clip < ~/.ssh/id_rsa.pub'
	8. Buka akun github anda dan masuk ke menu Setting
		-> pilih menu SSH and GPG keys
		-> isi kolom title (contoh : HOME desktop) dan paste key ke kolom key
		-> kemudian klik tombol 'add ssh key'
	9. Finish, sekarang anda bisa mengcloning repo di github dengan menggunakan SSH


! SSH-Agent
	- Merupakan program pembantu yang dipakai untuk menjaga identity-key dan passphrases. Jadi, bisa diartikan sebuah proses yang menangani identity-key ssh serta passphrases (password) ssh keys.
	- Sehingga administrator tidak perlu lagi melakukan entry passphrase lagi saat authentication ke ssh server. Biasanya digunakan jika kita menggunakan metode key-pair untuk melakukan remote ssh server.

! SSH-Add
	- SSH-Add adalah perintah yang digunakan untuk menambahkan private key (id_rsa) kedalam sebuah ssh-agent.

! Passphrase adalah kata sandi yang berfungsi sebagai pengaman file Sertifikat Digital (dapat dibuat dengan karakter apa saja, bebas).


!! satu ssh-key di komputer hanya bisa dihubungkan dengan 1 akun github saja
	! tetapi satu akun github bisa memiliki banyak ssh-key




!! NOTE !!
! Menangani  ! [remote rejected] master -> master (permission denied)
	1. git config --global --edit
	2. Add these lines of configuration at the end of file: 
		[credential]
		  helper = osxkeychain
		  useHttpPath = true



! cara mengembalikan branch yang sudah terhapus : 
	- git checkout -b <branch> <sha>




